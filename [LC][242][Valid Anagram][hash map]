class Solution(object):
    def isAnagram(self, s, t):
        # compare length, compare dictionaries
        # making a key

        # build dictionary
        # go through second string and decriment

        sDict = {}
        for char in s:
            if char not in sDict:
                sDict[char] = 1
            else:
                sDict[char] += 1
        
        for char in t:
            if char not in sDict:
                return False
            else:
                sDict[char] -= 1
                if sDict[char] < 0:
                    return False
        for values in sDict.values():
            if values != 0:
                return False
        return True

time complexity O(N) space complexity O(1) // max possible 26 char





# revisiting problem while working through grind75
# it works, done relatively quickly, but it's objectively less efficient than last lc entry
# after some digging, using indexing at each part of the for loop makes it very* inefficient
# using - for char in list* makes it so we're not jumping around a list and have a preset pointer***

class Solution(object):
    def isAnagram(self, s, t):
        # use a dictionary, build off of one

        dict1 = {}

        for i in range(0, len(s)):
            # build dict
            if s[i] not in dict1:
                dict1[s[i]] = 0
            dict1[s[i]] += 1

        for j in range(0, len(t)):
            # delete dict
            if t[j] not in dict1:
                return False

            if t[j] in dict1:
                dict1[t[j]] -= 1
                if dict1[t[j]] < 0:
                    return False
        
        for values in dict1.values():
            if values != 0:
                return False
        return True
