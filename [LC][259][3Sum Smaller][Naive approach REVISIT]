class Solution(object):
    def threeSumSmaller(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums.sort()
        count = 0
        for i in range(0, len(nums)):
            for j in range(i+1, len(nums)):
                for k in range(j+1, len(nums)):
                    if nums[i] + nums[j] + nums[k] < target:
                        count += 1
        return count

#time complexity O(n^3) and space complexity O(n) / tim sort

# possible solution
# TODO: find better index fix
class Solution(object):
    def threeSumSmaller(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums.sort()
        count = 0
        for i in range(0, len(nums)-2):
            # reset
            j = i + 1
            k = j + 1
            while nums[i] + nums[j] + nums[k] < target:
                count += 1
                # over index from iterating then checking
                # look for eloquent/efficent fix
                if k < len(nums)-1:
                    k += 1
                elif j < len(nums)-2:
                    j += 1
                # break out of while loop to pacing i loop
                else:
                    break            
                       
        return count

        
