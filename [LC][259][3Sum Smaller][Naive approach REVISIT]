class Solution(object):
    def threeSumSmaller(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums.sort()
        count = 0
        for i in range(0, len(nums)):
            for j in range(i+1, len(nums)):
                for k in range(j+1, len(nums)):
                    if nums[i] + nums[j] + nums[k] < target:
                        count += 1
        return count

#time complexity O(n^3) and space complexity O(n) / tim sort


class Solution(object):
    def threeSumSmaller(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        count = 0
        nums.sort()
        for i in range(len(nums)):
            j = i+1
            k = len(nums)-1

            # j -> k as possibilities, use
            while j < k:
                spec = nums[i] + nums[j] + nums[k]
                if spec < target:
                    # levy ordered list(less than) & two point principle
                    # if the highest val fits the budget, everything under will, too
                    count += k-j
                    # see if the next range set works
                    j += 1
                else:
                    # decrease highest val otherwise
                    k -= 1
        return count
# time complexity O(n^2) and space complexity is O(n)/tim sort //best case O(1) 


        
