# working through a list with specific sequence of characters, so using a stack is preferable
# stack checks as we add to it with multiple gates to check validity of sequence
# edge case protection - 'not stack' for no stack options to prevent index error
# if stack remaining after iterating through 's' - then we have a sequence without a close

# we use a stack to sort for an appropriate sequence, a stack as a sorting method. first important thing to notice is that there is a set
# of appropriate and inappropriate possible options depending on what has been placed prioir

class Solution(object):
    def isValid(self, s):
        stack = []

        for c in s:
            if c in '[{(':
                # add case
                stack.append(c)
            else:
                # edge case
                if not stack:
                    return False
                # pop case
                if c == ')' and stack[-1] == '(':
                    stack.pop()
                elif c == ']' and stack[-1] == '[':
                    stack.pop()
                elif c == '}' and stack[-1] == '{':
                    stack.pop()

                # fail case
                else:
                    return False
                
        if len(stack) == 0:
            return True
        else:
            return False

time complexity is O(n) and space complexity is O(n)



# alternative, more concise way using a dictionary to map appropriate pairings
class Solution(object):
    def isValid(self, s):
        paren = {"}":"{", "]":"[",")":"("}
        stack = []

        for p in s: 
            # checking if char is closing
            if p in paren:
                # pop case: if matches with top of stack, pair made
                if stack and stack[-1] == paren[p]:
                    stack.pop()
                else:
                    # not matching pair
                    return False
            else:
                # char is not closing - push to stack
                stack.append(p)

        # if stack is empty, true
        if not stack:
            return True
        else:
            return False


            