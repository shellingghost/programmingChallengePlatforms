
class Solution(object):
    def numIdenticalPairs(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # iterate and find pairs, if pairs meet 2 conditions (match & i<j), add to 'good pairs'
        # two pointish feeling, actually nested for loop
        count = 0
        for i in range(0,len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] == nums[j]:
                    count += 1
        return count

time complexity O(N^2) and space complexity O(1)


def numGoodPairs(nums):
  pairs = 0
  dict1 = {}
  for n in nums:
    # find another, init/add 1 to count
    # helpful to remember .get when initializing dictionaries
    dict1[n] = dict1.get(n, 0) + 1
    # each new addition must take into account and add prior combinations
    # each new addition cannot count itself as a pair (count - 1)
    pairs += dict1[n] - 1
  return pairs

pairs = [1,1,1]
time complexity O(N) space complexity O(N)
