# revisit 8/24, code much cleaner

# two pointer from either side and ending when they cross. using .lower() and .isalum() was key in parsing
# two cases allowed for continue, if they were invalid, and two cases worked together if they were invalid, otherwise iterate

class Solution(object):
    def isPalindrome(self, s):
      l,r = 0, len(s)-1
      s = s.lower()

      while l < r:
        if s[l].isalnum() != True:
          l += 1
          continue
        elif s[r].isalnum() != True:
          r -= 1
          continue

        if s[l] != s[r]:
          return False
        else:
          l += 1
          r -= 1
      return True

# time complexity o(n) and space complexity o(1)


two pointer: 
class Solution(object):
    def isPalindrome(self, s):


      l = 0
      r = len(s) - 1
      while l < r:
          # (l<r) check required, may be all non alphanum - infin loop
          while l < r and s[l].isalnum() == False:
            l += 1
          while l < r and s[r].isalnum() == False:
            r -= 1

          check3 = s[l]
          check4 = s[r]
          if s[l].lower() != s[r].lower():
              check1 = s[l].lower()
              check2 = s[r].lower()
              return False
          l += 1
          r -= 1
      return True

time complexity O(N) space complexity O(1)



naive
class Solution(object):
    def isPalindrome(self, s):
        s = s.lower()
        s1 = []
        for char in s:
            if char.isalnum():
                s1.append(char)
    # built in method reversed creates an iterator, list() turns it into a list
        s2 = list(reversed(s1))
        if s1 == s2:
            return True
        return False

time complexity O(N) space complexity O(N)





