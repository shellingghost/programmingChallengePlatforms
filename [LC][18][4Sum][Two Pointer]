# it works, but can be improved*

class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """

        quadruplets = []
        # TODO: same approach as subnumsays less than target
        #        two pointer, decreasing rPointer if too high, move left if rPoint == left
        #         and reset (?)
        nums.sort()
        for i in range(0, len(nums)):
        # anchor
            for j in range(i+1, len(nums)):
                # second anchor
                # while loop for both k & l
                k = j+1
                l = len(nums) - 1
                while k < l:
                    if nums[i] + nums[j] + nums[k] + nums[l] == target:
                        if [nums[i],nums[j],nums[k],nums[l]] not in quadruplets:
                            quadruplets.append([nums[i],nums[j],nums[k],nums[l]])
                        l -= 1
                    elif nums[i] + nums[j] + nums[k] + nums[l] > target:
                        l -= 1
                    else:
                        k += 1
        return quadruplets

# time complexity O(n^3) and space complexity O(1)
