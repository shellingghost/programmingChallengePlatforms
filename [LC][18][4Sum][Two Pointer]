# it works, but can be improved*

class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """

        quadruplets = []
        # TODO: same approach as subnumsays less than target
        #        two pointer, decreasing rPointer if too high, move left if rPoint == left
        #         and reset (?)
        nums.sort()
        for i in range(0, len(nums)):
        # anchor
            for j in range(i+1, len(nums)):
                # second anchor
                # while loop for both k & l
                k = j+1
                l = len(nums) - 1
                while k < l:
                    if nums[i] + nums[j] + nums[k] + nums[l] == target:
                        if [nums[i],nums[j],nums[k],nums[l]] not in quadruplets:
                            quadruplets.append([nums[i],nums[j],nums[k],nums[l]])
                        l -= 1
                    elif nums[i] + nums[j] + nums[k] + nums[l] > target:
                        l -= 1
                    else:
                        k += 1
        return quadruplets

# time complexity O(n^3) and space complexity O(n)/tim sort



# definitely better, but still underperformaing according to leetcode
class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """

        quadruplets = []
        # TODO: same approach as subnumsays less than target
        #        two pointer, decreasing rPointer if too high, move left if rPoint == left
        #         and reset (?)
        nums.sort()
        for i in range(0, len(nums)-3):
            # anchor
            # handles redundancy
            if i != 0 and nums[i] == nums[i-1]:
                continue
            for j in range(i+1, len(nums)-2):
                # second anchor
                # while loop for both k & l
                # handles redundancy
                if j > i + 1 and nums[j] == nums[j-1]:
                    continue

                k = j+1
                l = len(nums) - 1
                while k < l:
                    if nums[i] + nums[j] + nums[k] + nums[l] == target:
                        if [nums[i],nums[j],nums[k],nums[l]] not in quadruplets:
                            quadruplets.append([nums[i],nums[j],nums[k],nums[l]])
                        l -= 1
                    elif nums[i] + nums[j] + nums[k] + nums[l] > target:
                        l -= 1
                    else:
                        k += 1
        return quadruplets


# better, skims until not duplicate
class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """

        quadruplets = []
        # TODO: same approach as subnumsays less than target
        #        two pointer, decreasing rPointer if too high, move left if rPoint == left
        #         and reset (?)
        nums.sort()
        for i in range(0, len(nums)-3):
            # anchor
            # handles redundancy
            if i != 0 and nums[i] == nums[i-1]:
                continue
            for j in range(i+1, len(nums)-2):
                # second anchor
                # while loop for both k & l
                # handles redundancy
                if j > i + 1 and nums[j] == nums[j-1]:
                    continue

                k = j+1
                l = len(nums) - 1
                while k < l:
                    # while k < l and checking their are no dupes for both
                    if nums[i] + nums[j] + nums[k] + nums[l] == target:
                        quadruplets.append([nums[i],nums[j],nums[k],nums[l]])
                        l -= 1
                        k += 1
                        # skim tp find next appropriate
                        while k < l and nums[k-1] == nums[k]:
                            k += 1
                        while k < l and nums[l+1] == nums[l]:
                            l -= 1
                    elif nums[i] + nums[j] + nums[k] + nums[l] > target:
                        l -= 1
                    else:
                        k += 1
        return quadruplets

# time complexity O(n^3) and space complexity O(n) | tim sort

